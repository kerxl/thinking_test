#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Senler webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import httpx
import sys
from config.settings import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
API_BASE_URL = "http://localhost:8000"
TEST_USER_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_USERNAME = "test_user"
TEST_SENLER_TOKEN = "test_senler_token_12345"


async def test_senler_webhook():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook endpoint /senler/webhook"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Senler webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
    print(f"üì° API URL: {API_BASE_URL}")
    print(f"üë§ Test User ID: {TEST_USER_ID}")
    print(f"üé´ Senler Token: {TEST_SENLER_TOKEN}")
    print("=" * 50)
    
    webhook_data = {
        "user_id": TEST_USER_ID,
        "username": TEST_USERNAME,
        "token": TEST_SENLER_TOKEN,
        "senler_user_id": "senler_123"
    }
    
    try:
        async with httpx.AsyncClient() as client:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –∑–∞–ø—Ä–æ—Å
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –∑–∞–ø—Ä–æ—Å...")
            response = await client.post(
                f"{API_BASE_URL}/senler/webhook",
                json=webhook_data,
                timeout=10.0
            )
            
            print(f"üìä Status Code: {response.status_code}")
            print(f"üìã Response: {response.json()}")
            
            if response.status_code == 200:
                print("‚úÖ Webhook –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                print("\nü§ñ –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞.")
                print("üì± –î–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞—á–∞—Ç—å'")
                print("üéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {response.text}")
                
    except httpx.ConnectError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: make run-with-api")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/health", timeout=5.0)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {data}")
                return True
            else:
                print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                return False
    except httpx.ConnectError:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:8000")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        return False


async def send_direct_telegram_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("\nüîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API...")
    
    try:
        async with httpx.AsyncClient() as client:
            telegram_api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            
            message_data = {
                "chat_id": TEST_USER_ID,
                "text": "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–≠—Ç–æ –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏.",
                "parse_mode": "HTML"
            }
            
            response = await client.post(telegram_api_url, json=message_data, timeout=10.0)
            
            if response.status_code == 200:
                print("‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.json()}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Senler –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞...")
    api_available = await test_api_health()
    
    if not api_available:
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   make run-with-api")
        print("   –∏–ª–∏")
        print("   python src/run_with_api.py")
        return
    
    print("\n" + "=" * 50)
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook
    print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Senler webhook...")
    await test_senler_webhook()
    
    print("\n" + "=" * 50)
    
    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    await send_direct_telegram_message()
    
    print("\n" + "=" * 50)
    print("‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ Telegram:")
    print("   1. –ü–æ–ª—É—á–∏–ª–∏ –ª–∏ –≤—ã —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞—á–∞—Ç—å'?")
    print("   2. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤?")
    print("   3. –ò–ª–∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏?")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == "--user-id" and len(sys.argv) > 2:
            TEST_USER_ID = int(sys.argv[2])
        elif sys.argv[1].isdigit():
            TEST_USER_ID = int(sys.argv[1])
    
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è User ID: {TEST_USER_ID}")
    print("üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è User ID: python test_senler_webhook.py YOUR_USER_ID")
    print()
    
    asyncio.run(main())