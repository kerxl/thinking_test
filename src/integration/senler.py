"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Senler API
"""

import logging
import httpx
from typing import Optional, Dict, Any
from datetime import datetime

from src.database.operations import get_or_create_user, get_user_by_id, update_user, get_user_by_username
from config.settings import BOT_TOKEN
from config.const import MESSAGES

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤
from src.bot import handler

logger = logging.getLogger(__name__)


class SenlerIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Senler API"""

    def __init__(self, bot_token: str = BOT_TOKEN):
        self.bot_token = bot_token
        self.telegram_api_url = f"https://api.telegram.org/bot{bot_token}"

    async def try_establish_contact_and_get_user_id(self, username: str, establish_contact: bool = True) -> Optional[int]:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∏—Ç—å user_id
        
        Args:
            username: Telegram username (–±–µ–∑ @)
            establish_contact: –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            
        Returns:
            int: Telegram user_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            clean_username = username.lstrip('@') if username else ""
            
            if not clean_username:
                logger.warning("–ü—É—Å—Ç–æ–π username –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
                return None
            
            logger.info(f"ü§ù –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å @{clean_username}")
            
            timeout = httpx.Timeout(30.0, connect=10.0)
            
            async with httpx.AsyncClient(timeout=timeout) as client:
                if establish_contact:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    welcome_message = {
                        "chat_id": f"@{clean_username}",
                        "text": (
                            "üéØ –ü—Ä–∏–≤–µ—Ç! –¢–µ–±—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –∫ –Ω–∞–º –∏–∑ Senler –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ '–°—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è'.\n\n"
                            "–ù–∞–∂–º–∏ /start –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!"
                        ),
                        "disable_notification": False
                    }
                    
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ @{clean_username}")
                    response = await client.post(
                        f"{self.telegram_api_url}/sendMessage",
                        json=welcome_message
                    )
                    
                    if response.status_code == 200:
                        msg_data = response.json()
                        if msg_data.get("ok") and "result" in msg_data:
                            chat = msg_data["result"].get("chat", {})
                            user_id = chat.get("id")
                            if user_id:
                                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! user_id: {user_id} –¥–ª—è @{clean_username}")
                                return user_id
                        else:
                            error_description = msg_data.get("description", "Unknown error")
                            logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {error_description}")
                    else:
                        response_data = response.json() if response.status_code != 500 else {}
                        error_description = response_data.get("description", "Unknown error")
                        logger.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_description}")
                
                # –ï—Å–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                return await self.get_user_id_by_username(clean_username)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å @{clean_username}: {e}")
            return None

    async def get_user_id_by_username(self, username: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç user_id —á–µ—Ä–µ–∑ Telegram Bot API –∏—Å–ø–æ–ª—å–∑—É—è username
        
        Args:
            username: Telegram username (–±–µ–∑ @)
            
        Returns:
            int: Telegram user_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            clean_username = username.lstrip('@') if username else ""
            
            if not clean_username:
                logger.warning("–ü—É—Å—Ç–æ–π username –¥–ª—è –ø–æ–∏—Å–∫–∞ user_id")
                return None
            
            logger.info(f"üîç –ò—â–µ–º user_id –¥–ª—è username: @{clean_username}")
            
            timeout = httpx.Timeout(30.0, connect=10.0)
            
            async with httpx.AsyncClient(timeout=timeout) as client:
                # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ getChat
                # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –∏–º–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                logger.info(f"üîç –ú–µ—Ç–æ–¥ 1: –ü—ã—Ç–∞–µ–º—Å—è getChat –¥–ª—è @{clean_username}")
                response = await client.post(
                    f"{self.telegram_api_url}/getChat",
                    json={"chat_id": f"@{clean_username}"}
                )
                
                if response.status_code == 200:
                    chat_data = response.json()
                    if chat_data.get("ok") and "result" in chat_data:
                        user_id = chat_data["result"].get("id")
                        if user_id:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω user_id —á–µ—Ä–µ–∑ getChat: {user_id} –¥–ª—è @{clean_username}")
                            return user_id
                    else:
                        error_description = chat_data.get("description", "Unknown error")
                        logger.info(f"‚ö†Ô∏è  getChat –Ω–µ—É—Å–ø–µ—à–µ–Ω: {error_description}")
                else:
                    logger.info(f"‚ö†Ô∏è  getChat HTTP {response.status_code}: {response.text[:100]}")
                
                # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –∏–∑ –æ—à–∏–±–∫–∏
                # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                logger.info(f"üîç –ú–µ—Ç–æ–¥ 2: –ü—ã—Ç–∞–µ–º—Å—è sendMessage –¥–ª—è @{clean_username}")
                test_message = {
                    "chat_id": f"@{clean_username}",
                    "text": "test",
                    "disable_notification": True
                }
                
                response = await client.post(
                    f"{self.telegram_api_url}/sendMessage",
                    json=test_message
                )
                
                if response.status_code == 200:
                    msg_data = response.json()
                    if msg_data.get("ok") and "result" in msg_data:
                        chat = msg_data["result"].get("chat", {})
                        user_id = chat.get("id")
                        if user_id:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω user_id —á–µ—Ä–µ–∑ sendMessage: {user_id} –¥–ª—è @{clean_username}")
                            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å
                            try:
                                message_id = msg_data["result"].get("message_id")
                                await client.post(
                                    f"{self.telegram_api_url}/deleteMessage",
                                    json={"chat_id": user_id, "message_id": message_id}
                                )
                                logger.info(f"üóëÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                            except:
                                logger.info(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                            return user_id
                else:
                    response_data = response.json() if response.status_code != 500 else {}
                    error_description = response_data.get("description", "Unknown error")
                    logger.info(f"‚ö†Ô∏è  sendMessage –Ω–µ—É—Å–ø–µ—à–µ–Ω: {error_description}")
                
                # –ï—Å–ª–∏ –æ–±–∞ –º–µ—Ç–æ–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è @{clean_username} —á–µ—Ä–µ–∑ Telegram API")
                logger.info(f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                logger.info(f"   - –ë–æ—Ç –Ω–µ –∏–º–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                logger.info(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
                
                return None
                    
        except httpx.ConnectTimeout:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ user_id –¥–ª—è @{clean_username}")
            return None
        except httpx.ReadTimeout:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ user_id –¥–ª—è @{clean_username}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id –¥–ª—è @{clean_username}: {e}")
            import traceback
            logger.error(f"üêõ Traceback: {traceback.format_exc()}")
            return None

    async def process_webhook_request(self, user_id: int, username: str, senler_token: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –∑–∞–ø—Ä–æ—Å –æ—Ç Senler

        Args:
            user_id: Telegram user ID (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–ª—è Senler –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            username: Telegram username
            senler_token: Token –æ—Ç Senler –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            is_virtual_user = user_id >= 99000000  # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ user_id –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 99000000
            
            if is_virtual_user:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Senler –¥–ª—è –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                logger.info(f"üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram User ID –≤ Senler")
            else:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Senler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await get_or_create_user(user_id=user_id, username=username)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ
            was_existing_user = user and not user.from_senler
            if was_existing_user:
                logger.info(f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, —Å–≤—è–∑—ã–≤–∞–µ–º —Å Senler")
            else:
                logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Senler")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Senler –¥–∞–Ω–Ω—ã–º–∏
            user = await update_user(user_id=user_id, senler_token=senler_token, from_senler=True)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if was_existing_user and user:
                logger.info(f"üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                await update_user(
                    user_id=user_id,
                    current_task_type=None,
                    current_question=None,
                    current_step=None
                )

            if user:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ Senler")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ Senler")

            # –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö) –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if is_virtual_user:
                logger.info(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.info(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
            await self._send_test_start_message_via_bot(user_id)
            
            return {
                "success": True,
                "message": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Senler –≤–æ—Ä–æ–Ω–∫–∏",
                "user_id": user_id,
                "is_virtual": is_virtual_user,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –æ—Ç Senler: {e}")
            return {"success": False, "error": str(e)}

    async def _send_start_message(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API"""
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API: {self.telegram_api_url}")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            timeout = httpx.Timeout(30.0, connect=10.0)

            async with httpx.AsyncClient(timeout=timeout) as client:
                message_text = (
                    "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç '–°—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è'!</b>\n\n"
                    "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π.\n\n"
                    "üìä –°–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —Ç–µ—Å—Ç–æ–≤\n"
                    "‚è±Ô∏è –ó–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 15-20 –º–∏–Ω—É—Ç\n"
                    "üéÅ –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
                    "<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.</i>"
                )

                keyboard = {
                    "inline_keyboard": [
                        [
                            {
                                "text": MESSAGES.get("button_start", "–ù–∞—á–∞—Ç—å"),
                                "callback_data": "start_personal_data",
                            }
                        ]
                    ]
                }

                request_data = {
                    "chat_id": user_id,
                    "text": message_text,
                    "parse_mode": "HTML",
                    "reply_markup": keyboard,
                }

                logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API...")

                try:
                    response = await client.post(
                        f"{self.telegram_api_url}/sendMessage",
                        json=request_data,
                    )

                    if response.status_code == 200:
                        response_data = response.json()
                        logger.info(f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        logger.info(f"üì• –û—Ç–≤–µ—Ç –æ—Ç Telegram API: {response_data}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        logger.error(f"üì• HTTP {response.status_code}: {response.text}")

                        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                        if response.status_code in [401, 403]:
                            logger.warning("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ aiogram bot...")
                            await self._send_via_aiogram_bot(user_id, message_text, keyboard)

                except httpx.ConnectTimeout:
                    logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
                    logger.warning("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ aiogram bot...")
                    await self._send_via_aiogram_bot(user_id, message_text, keyboard)
                except httpx.ReadTimeout:
                    logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API")
                    logger.warning("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ aiogram bot...")
                    await self._send_via_aiogram_bot(user_id, message_text, keyboard)
                except Exception as api_error:
                    logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ API: {api_error}")
                    logger.warning("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ aiogram bot...")
                    await self._send_via_aiogram_bot(user_id, message_text, keyboard)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback

            logger.error(f"üêõ Traceback: {traceback.format_exc()}")

            # Fallback - –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ aiogram
            try:
                await self._send_via_aiogram_bot(
                    user_id,
                    "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç '–°—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è'!",
                    {"inline_keyboard": [[{"text": "–ù–∞—á–∞—Ç—å", "callback_data": "start_personal_data"}]]},
                )
            except Exception as fallback_error:
                logger.error(f"‚ùå Fallback –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {fallback_error}")

    async def _send_via_aiogram_bot(self, user_id: int, text: str, keyboard: dict):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ aiogram bot"""
        try:
            from src.bot.globals import bot
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º keyboard –≤ aiogram —Ñ–æ—Ä–º–∞—Ç
            markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"]) for btn in row]
                    for row in keyboard["inline_keyboard"]
                ]
            )

            await bot.send_message(chat_id=user_id, text=text, parse_mode="HTML", reply_markup=markup)
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ aiogram bot –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ aiogram: {e}")

    async def _send_test_start_message_via_bot(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ Senler –≤–æ—Ä–æ–Ω–∫–∏"""
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            from src.bot.globals import bot
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            message_text = (
                "‚ú® <b>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
                "üéØ <b>–¢–µ—Å—Ç '–°—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è'</b>\n\n"
                "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π.\n\n"
                "üìä –°–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —Ç–µ—Å—Ç–æ–≤\n"
                "‚è±Ô∏è –ó–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 15-20 –º–∏–Ω—É—Ç\n"
                "üéÅ –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
                "<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.</i>"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=MESSAGES.get("button_start", "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"), 
                            callback_data="start_personal_data"
                        )
                    ]
                ]
            )

            await bot.send_message(chat_id=user_id, text=message_text, parse_mode="HTML", reply_markup=markup)

            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"üêõ Traceback: {traceback.format_exc()}")

    async def _send_start_message_via_bot(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ aiogram bot (–¥–ª—è webhook —Ä–µ–∂–∏–º–∞)"""
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ aiogram bot –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            from src.bot.globals import bot
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            message_text = (
                "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç '–°—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è'!</b>\n\n"
                "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π.\n\n"
                "üìä –°–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —Ç–µ—Å—Ç–æ–≤\n"
                "‚è±Ô∏è –ó–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 15-20 –º–∏–Ω—É—Ç\n"
                "üéÅ –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
                "<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.</i>"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ aiogram
            markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=MESSAGES.get("button_start", "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"), callback_data="start_personal_data"
                        )
                    ]
                ]
            )

            await bot.send_message(chat_id=user_id, text=message_text, parse_mode="HTML", reply_markup=markup)

            logger.info(f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ aiogram bot –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ aiogram: {e}")
            import traceback

            logger.error(f"üêõ Traceback: {traceback.format_exc()}")

            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                from src.bot.globals import bot

                await bot.send_message(
                    chat_id=user_id,
                    text="üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç '–°—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è'!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    parse_mode="HTML",
                )
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as fallback_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {fallback_error}")

    async def return_user_to_senler(self, user_id: int, message: str = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!") -> bool:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Senler –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤

        Args:
            user_id: Telegram user ID
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            user = await get_user_by_id(user_id)
            if not user or not user.senler_token:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç Senler token")
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self._send_final_message(user_id, message)

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ Senler —á–µ—Ä–µ–∑ –∏—Ö API
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ —Å senler_token

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ Senler")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ Senler: {e}")
            return False

    async def _send_final_message(self, user_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.telegram_api_url}/sendMessage",
                    json={"chat_id": user_id, "text": message, "parse_mode": "HTML"},
                )

                if response.status_code == 200:
                    logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
senler_integration = SenlerIntegration()
