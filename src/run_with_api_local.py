"""
–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (polling) –∏ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Senler –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import json
import logging
import uvicorn
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.const import TaskEntity, MESSAGES
from config.settings import DEBUG
from src.database.operations import init_db
from src.bot.globals import bot, dp, task_manager
from src.api.server import app
from src.core.scheduler import link_scheduler

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤
from src.bot import handler
from src.bot import callback
from src.bot import proccesser
from src.bot import fallback  # Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏)

logging.basicConfig(
    level=logging.INFO if DEBUG else logging.WARNING,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        await init_db()
        await TaskEntity.priorities.value.load_questions()
        await TaskEntity.inq.value.load_questions()
        await TaskEntity.epi.value.load_questions()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å—Å—ã–ª–æ–∫
        await link_scheduler.start()

        logger.info("ü§ñ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ webhook –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üßπ Webhook —É–¥–∞–ª–µ–Ω, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ polling —Ä–µ–∂–∏–º–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞: {e}")
        raise


async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ"""
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling –±–æ—Ç–∞: {e}")
    finally:
        await link_scheduler.stop()


async def run_api():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        logger.info("üåê –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8000...")
        config = uvicorn.Config(
            app, 
            host="0.0.0.0", 
            port=8000, 
            log_level="info" if DEBUG else "warning"
        )
        server = uvicorn.Server(config)
        await server.serve()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open("config/constants.json", "r", encoding="utf-8") as json_file:
        MESSAGES.update(json.load(json_file))

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Mind Style Bot —Å Senler –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
    await setup_bot()

    # –ó–∞–ø—É—Å–∫–∞–µ–º bot –∏ API –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    try:
        await asyncio.gather(
            run_bot(),
            run_api()
        )
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        await link_scheduler.stop()
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")