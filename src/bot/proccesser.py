from datetime import datetime

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from config.const import PersonalDataStates, MESSAGES, AGE_MAX, AGE_MIN
from src.bot.main import dp
from src.database.operations import get_or_create_user, update_user


@dp.message(PersonalDataStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name_parts = message.text.strip().split()
    if len(name_parts) < 2:
        await message.answer(MESSAGES["name_input_call"])
        return

    first_name = name_parts[0]
    last_name = " ".join(name_parts[1:])

    if len(first_name) < 2 or len(last_name) < 2:
        await message.answer(MESSAGES["name_input_format_error"])
        return

    await state.update_data(first_name=first_name, last_name=last_name)
    await message.answer(
        f"‚úÖ –ò–º—è: <b>{first_name} {last_name}</b>\n\n"
        f"2Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞.\n\n"
        f"üìù –®–∞–≥: 2 / 2"
    )
    await state.set_state(PersonalDataStates.waiting_for_age)


@dp.message(PersonalDataStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < AGE_MIN or age > AGE_MAX:
            await message.answer(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç {AGE_MIN} –¥–æ {AGE_MAX} –ª–µ—Ç)")
            return
    except ValueError:
        await message.answer(MESSAGES["age_type_error"])
        return

    data = await state.get_data()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=data["first_name"],
        last_name=data["last_name"],
    )

    await update_user(
        user_id=message.from_user.id,
        first_name=data["first_name"],
        last_name=data["last_name"],
        age=age,
        test_start=datetime.now(),
    )

    await state.clear()

    await message.answer(
        f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
        f"üë§ –ò–º—è: {data['first_name']} {data['last_name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
        f"–ú—ã —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–º–µ–Ω–Ω–æ –ø–æ–¥ –≤–∞—Å.\n\n"
        f"–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç—Ä–∏ —Ç–µ—Å—Ç–∞. –¢–∞–º –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–µ.\n\n"
        f"–ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å¬ª.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=MESSAGES["button_start"], callback_data="start_tasks")]]
        ),
    )
