from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from main import task_manager
from config.const import MESSAGES
from src.core.admin_reports import admin_reports
from src.database.operations import get_or_create_user


async def complete_all_tasks(message: Message, user):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    all_scores = await task_manager.complete_all_tasks(user)

    if not all_scores:
        await message.edit_text(MESSAGES["summary_result_error"])
        return

    result_text = "üéâ <b>–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!</b>\n\n"
    result_text += "üìä <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"

    result_text += "<b>üß† –°—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è:</b>\n"
    inq_scores = {
        k: v
        for k, v in all_scores.items()
        if k in ["–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π", "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π", "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π"]
    }
    sorted_inq = sorted(inq_scores.items(), key=lambda x: x[1], reverse=True)

    for i, (style, score) in enumerate(sorted_inq):
        emoji = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "üìç"
        result_text += f"{emoji} {style}: {score} –±–∞–ª–ª–æ–≤\n"

    result_text += f"\n<b>üé≠ –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç:</b> {all_scores.get('temperament', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
    result_text += f"<b>üìä E (—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è):</b> {all_scores.get('E', 0)}\n"
    result_text += f"<b>üìä N (–Ω–µ–π—Ä–æ—Ç–∏–∑–º):</b> {all_scores.get('N', 0)}\n"
    result_text += f"<b>üìä L (—à–∫–∞–ª–∞ –ª–∂–∏):</b> {all_scores.get('L', 0)}\n"

    await message.edit_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=MESSAGES["button_again"], callback_data="start_personal_data")]]
        ),
    )

    updated_user = await get_or_create_user(user_id=user.user_id)
    await admin_reports.send_to_admin(updated_user, all_scores)
