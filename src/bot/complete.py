from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from .globals import task_manager
from config.const import MESSAGES
from src.core.admin_reports import admin_reports
from src.database.operations import get_or_create_user
from src.integration.senler import senler_integration


async def complete_all_tasks(message: Message, user):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    all_scores = await task_manager.complete_all_tasks(user)

    if not all_scores:
        await message.edit_text(MESSAGES["summary_result_error"])
        return

    result_text = "üéâ <b>–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!‚úÖ</b>\n\n"
    result_text += "üìä <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"

    result_text += "<b>üß† –°—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è:</b>\n"
    inq_scores = {
        k: v
        for k, v in all_scores.items()
        if k
        in [
            "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π",
            "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
            "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
            "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
            "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
        ]
    }
    sorted_inq = sorted(inq_scores.items(), key=lambda x: x[1], reverse=True)

    for i, (style, score) in enumerate(sorted_inq):
        emoji = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "üìç"
        result_text += f"{emoji} {style}: {score} –±–∞–ª–ª–æ–≤\n"

    result_text += (
        f"\n<b>üé≠ –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç:</b> {all_scores.get('temperament', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
    )
    result_text += f"<b>üìä E (—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è):</b> {all_scores.get('E', 0)}\n"
    result_text += f"<b>üìä N (–Ω–µ–π—Ä–æ—Ç–∏–∑–º):</b> {all_scores.get('N', 0)}\n"
    result_text += f"<b>üìä L (—à–∫–∞–ª–∞ –ª–∂–∏):</b> {all_scores.get('L', 0)}\n"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–∑ Senler
    if not user.from_senler:
        from datetime import datetime, timedelta
        from config.settings import DEBUG
        from src.database.operations import update_user as update_user_db

        # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        if DEBUG:
            send_time = datetime.now() + timedelta(seconds=5)
        else:
            send_time = datetime.now() + timedelta(hours=24)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
        await update_user_db(user_id=user.user_id, admin_link_send_time=send_time)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Senler
    if user.from_senler:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Senler, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ Senler
        result_text += "\n\n‚ú® <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!</b>\n"
        result_text += "<i>–°–µ–π—á–∞—Å –º—ã –≤–µ—Ä–Ω–µ–º –≤–∞—Å –≤ Senler...</i>"

        await message.edit_text(result_text)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Senler
        await senler_integration.return_user_to_senler(
            user.user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        )
    else:
        # –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–∑ Senler
        result_text += "\n\nüéÅ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!</b>\n"
        result_text += "üìß <i>–ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –≤–∞–º –ø—Ä–∏–¥–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.</i>"

        await message.edit_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=MESSAGES["button_again"],
                            callback_data="start_personal_data",
                        )
                    ]
                ]
            ),
        )

    from sqlalchemy import select
    from src.database.models import AsyncSessionLocal, User

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.user_id == user.user_id))
        updated_user = result.scalar_one_or_none()

    if updated_user:
        await admin_reports.send_to_admin(updated_user, all_scores)
