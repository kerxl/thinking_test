from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from .globals import task_manager, dp
from config.const import (
    MESSAGES,
    PersonalDataStates,
    AdminStates,
    INQ_SCORES_PER_QUESTION,
    TaskEntity,
    TaskType,
    PRIORITIES_SCORES_PER_QUESTION,
)
from .complete import complete_all_tasks
from .sender import send_priorities_task, send_inq_question, send_epi_question
from src.database.operations import get_or_create_user


async def get_retry_callback_data(user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞' –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    task_state = task_manager.get_task_state(user_id)
    if not task_state:
        return "start_tasks"
    
    current_task = task_state["current_task_type"]
    current_question = task_state["current_question"]
    
    if current_task == TaskType.priorities.value:
        return "retry_priorities"
    elif current_task == TaskType.inq.value:
        return f"retry_inq_{current_question}"
    elif current_task == TaskType.epi.value:
        return f"retry_epi_{current_question}"
    else:
        return "start_tasks"


async def send_error_with_retry(callback: CallbackQuery, error_text: str, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É —Å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'"""
    retry_callback_data = await get_retry_callback_data(user_id)
    
    await callback.message.edit_text(
        f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{error_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=retry_callback_data)]
            ]
        ),
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "start_personal_data")
async def collect_personal_data(callback: CallbackQuery, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    import logging
    logger = logging.getLogger(__name__)
    
    logger.info(f"üéØ –°–†–ê–ë–ê–¢–´–í–ê–ï–¢ callback start_personal_data –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    logger.info(f"   Callback ID: {callback.id}")
    logger.info(f"   Message ID: {callback.message.message_id}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É"
        await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        user = await task_manager.get_cached_user(
            user_id=callback.from_user.id, username=callback.from_user.username
        )
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω: {user.user_id if user else 'None'}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()
        
        message_text = MESSAGES.get("callback_start_collect_personal_data", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
        
        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
            )
        except Exception as edit_error:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(message_text)
        
        await state.set_state(PersonalDataStates.waiting_for_name)
        
        logger.info(f"‚úÖ Callback start_personal_data —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        logger.info(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: PersonalDataStates.waiting_for_name")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback start_personal_data: {e}")
        import traceback
        logger.error(f"üêõ Traceback: {traceback.format_exc()}")
        try:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback


@dp.callback_query(F.data == "start_tasks")
async def start_tasks(callback: CallbackQuery):
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )

    success = await task_manager.start_tasks(user)
    if not success:
        await callback.message.edit_text(MESSAGES["task_not_loaded"])
        return

    await send_priorities_task(callback.message, user.user_id)
    await callback.answer()


@dp.callback_query(F.data.startswith("priority_new_"))
async def process_priorities_answer(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    """
    _, _, new_index_str = callback.data.split("_")
    new_index = int(new_index_str)

    user = await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )

    remaining_categories = task_manager.get_priorities_remaining_categories_data(
        user.user_id
    )

    if new_index >= len(remaining_categories):
        await send_error_with_retry(callback, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", user.user_id)
        return

    original_index = remaining_categories[new_index]["original_index"]
    category_title = remaining_categories[new_index]["category_data"]["title"]

    success, message_text = await task_manager.process_priorities_step_answer(
        user, str(original_index)
    )
    if not success:
        await send_error_with_retry(callback, message_text, user.user_id)
        return

    state = task_manager.get_task_state(user.user_id)
    if not state:
        await send_error_with_retry(callback, "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", user.user_id)
        return

    score = PRIORITIES_SCORES_PER_QUESTION[state["current_step"] - 1]
    await callback.answer(f"‚úÖ '{category_title}' –ø–æ–ª—É—á–∏–ª–∞ {score} –±–∞–ª–ª–æ–≤")

    if task_manager.is_priorities_task_completed(user.user_id):
        await callback.message.edit_text(
            "üéâ <b>–¢–µ—Å—Ç 1 –∑–∞–≤–µ—Ä—à–µ–Ω!‚úÖ</b>\n\n" "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É...",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=MESSAGES["button_inq_task_start"],
                            callback_data="start_inq_task",
                        )
                    ]
                ]
            ),
        )
        await task_manager.move_to_next_task(user.user_id)
    else:
        await send_priorities_task(callback.message, user.user_id)


@dp.callback_query(F.data == "start_inq_task")
async def start_inq_task(callback: CallbackQuery):
    """
    –ù–∞—á–∞–ª–æ INQ —Ç–µ—Å—Ç–∞
    """
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )
    await send_inq_question(callback.message, callback.from_user.id, 0)
    await callback.answer()


@dp.callback_query(F.data.startswith("inq_new_"))
async def process_inq_answer(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ INQ —Ç–µ—Å—Ç–∞
    """
    parts = callback.data.split("_")
    question_num = int(parts[2])
    new_index = int(parts[3])

    user = await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )

    remaining_data = task_manager.get_inq_remaining_options_data(
        user.user_id, question_num
    )

    if new_index >= len(remaining_data["options"]):
        await send_error_with_retry(callback, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞", user.user_id)
        return

    original_option = remaining_data["options"][new_index]["original_option"]

    success, message_text = await task_manager.process_inq_answer(user, original_option)
    if not success:
        await send_error_with_retry(callback, message_text, user.user_id)
        return

    state = task_manager.get_task_state(user.user_id)
    if not state:
        await send_error_with_retry(callback, "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", user.user_id)
        return

    score = INQ_SCORES_PER_QUESTION[state["current_step"] - 1]
    await callback.answer(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –ø–æ–ª—É—á–∏–ª {score} –±–∞–ª–ª–æ–≤")

    if task_manager.is_inq_question_completed(user.user_id, question_num):
        if question_num + 1 < TaskEntity.inq.value.get_total_questions():
            await task_manager.move_to_next_question(user.user_id)
            await send_inq_question(callback.message, user.user_id, question_num + 1)
        else:
            await task_manager.move_to_next_task(user.user_id)
            await callback.message.edit_text(
                "üéâ <b>–¢–µ—Å—Ç 2 –∑–∞–≤–µ—Ä—à–µ–Ω!‚úÖ</b>\n\n" "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç—É...",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text=MESSAGES["button_epi_task_start"],
                                callback_data="start_epi_task",
                            )
                        ]
                    ]
                ),
            )
    else:
        await send_inq_question(callback.message, user.user_id, question_num)


@dp.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    """
    user = await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )

    success, message_text, new_state = await task_manager.go_back_question(user)
    if not success:
        await send_error_with_retry(callback, message_text, user.user_id)
        return

    await callback.answer(MESSAGES["go_back_completed"])

    if new_state["current_task_type"] == TaskType.priorities.value:
        await send_priorities_task(callback.message, user.user_id)
    elif new_state["current_task_type"] == TaskType.inq.value:
        await send_inq_question(
            callback.message, user.user_id, new_state["current_question"]
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
@dp.callback_query(F.data == "retry_priorities")
async def retry_priorities_task(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    user = await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )
    await send_priorities_task(callback.message, user.user_id)


@dp.callback_query(F.data.startswith("retry_inq_"))
async def retry_inq_question(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ INQ –≤–æ–ø—Ä–æ—Å–∞"""
    question_num = int(callback.data.split("_")[2])
    user = await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )
    await send_inq_question(callback.message, user.user_id, question_num)


@dp.callback_query(F.data.startswith("retry_epi_"))
async def retry_epi_question(callback: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ EPI –≤–æ–ø—Ä–æ—Å–∞"""
    question_num = int(callback.data.split("_")[2])
    user = await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )
    await send_epi_question(callback.message, user.user_id, question_num)


@dp.callback_query(F.data == "start_epi_task")
async def start_epi_task(callback: CallbackQuery):
    """
    –ù–∞—á–∞–ª–æ EPI —Ç–µ—Å—Ç–∞
    """
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )
    await send_epi_question(callback.message, callback.from_user.id, 0)
    await callback.answer()


@dp.callback_query(F.data.startswith("epi_"))
async def process_epi_answer(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ EPI —Ç–µ—Å—Ç–∞
    """
    _, question_num_str, answer = callback.data.split("_")
    question_num = int(question_num_str)

    user = await task_manager.get_cached_user(
        user_id=callback.from_user.id, username=callback.from_user.username
    )

    success, message_text = await task_manager.process_epi_answer(user, answer)
    if not success:
        await send_error_with_retry(callback, message_text, user.user_id)
        return

    await callback.answer(f"‚úÖ –û—Ç–≤–µ—Ç: {answer}")

    if question_num + 1 < TaskEntity.epi.value.get_total_questions():
        await send_epi_question(callback.message, user.user_id, question_num + 1)
    else:
        await complete_all_tasks(callback.message, user)


@dp.callback_query(F.data.startswith("add_senler_link_"))
async def add_senler_link_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ Senler –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    from config.settings import ADMIN_USER_ID

    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
    user_id = int(callback.data.split("_")[-1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(target_user_id=user_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    await state.set_state(AdminStates.waiting_for_senler_link)

    # –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É
    await callback.message.reply(
        f"üìù –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Senler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
        "–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞."
    )

    await callback.answer("‚úÖ –û–∂–∏–¥–∞—é –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏")
