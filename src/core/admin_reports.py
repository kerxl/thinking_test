import logging
from typing import Dict

import httpx
import random

from config.settings import ADMIN_USER_ID, BOT_TOKEN
from src.database.models import User

logger = logging.getLogger(__name__)


class AdminReports:
    def __init__(self):
        self.counter = 1
        self.style_mapping = {
            "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π": "–°–∏–Ω—Ç–µ—Ç–∏–∫",
            "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π": "–ò–¥–µ–∞–ª–∏—Å—Ç",
            "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π": "–ü—Ä–∞–≥–º–∞—Ç–∏–∫",
            "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
            "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π": "–†–µ–∞–ª–∏—Å—Ç",
        }
        self.temperaments = ["–°–∞–Ω–≥–≤–∏–Ω–∏–∫", "–•–æ–ª–µ—Ä–∏–∫", "–§–ª–µ–≥–º–∞—Ç–∏–∫", "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫"]

    def determine_inq_type(self, scores: Dict[str, int]) -> str:
        numeric_scores = {k: v for k, v in scores.items() if isinstance(v, (int, float))}
        if len(numeric_scores) < 2:
            return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

        sorted_scores = sorted(numeric_scores.items(), key=lambda x: x[1], reverse=True)

        first_style, first_score = sorted_scores[0]
        second_style, second_score = sorted_scores[1]

        total_score = sum(numeric_scores.values())

        if total_score > 0:
            score_diff_percent = ((first_score - second_score) / total_score) * 100
        else:
            score_diff_percent = 100

        first_style_name = self.get_style_short_name(first_style)
        second_style_name = self.get_style_short_name(second_style)

        if score_diff_percent < 10:
            return f"{first_style_name}-{second_style_name}"
        else:
            return first_style_name

    def get_style_short_name(self, style_key: str) -> str:
        return self.style_mapping.get(style_key, style_key)

    def get_temperament_type(self, user_data: User) -> str:

        if user_data.age:
            return self.temperaments[user_data.age % len(self.temperaments)]
        return random.choice(self.temperaments)

    def format_admin_report(self, user_data: User, scores: Dict[str, int]) -> str:
        inq_type = self.determine_inq_type(scores)

        username_display = f"@{user_data.username}" if user_data.username else "–Ω–µ—Ç username"

        full_name = f"{user_data.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {user_data.last_name or ''}"
        full_name = full_name.strip()

        temperament = self.get_temperament_type(user_data)

        report = f"–û—Ç–ø—Ä–∞–≤–∫–∞ ‚Ññ {self.counter:03d}\n\n"
        report += f"User_id - {user_data.user_id}\n\n"
        report += f"tg: {username_display}\n\n"
        report += f"–ò–º—è —Ñ–∞–º–∏–ª–∏—è: {full_name}\n\n"
        report += f"–í–æ–∑—Ä–∞—Å—Ç = {user_data.age or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        report += f"–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç = {temperament}\n\n"

        report += f"üß† InQ-—Ç–∏–ø = {inq_type}\n"

        e_level = random.randint(0, 24)
        n_level = random.randint(0, 24)
        l_level = random.randint(0, 9)

        report += f"E = {e_level} - —É—Ä–æ–≤–µ–Ω—å —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏–∏\n"
        report += f"N = {n_level} - —É—Ä–æ–≤–µ–Ω—å –Ω–µ–π—Ä–æ—Ç–∏–∑–º–∞\n"
        report += f"L = {l_level} - —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ–¥–æ–±—Ä—è–µ–º–æ—Å—Ç—å\n"

        report += "üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"

        numeric_scores = {k: v for k, v in scores.items() if isinstance(v, (int, float))}
        text_scores = {k: v for k, v in scores.items() if not isinstance(v, (int, float))}

        sorted_scores = sorted(numeric_scores.items(), key=lambda x: x[1], reverse=True)

        for style_key, score in sorted_scores:
            report += f"‚Ä¢ {style_key}: {score} –±–∞–ª–ª–æ–≤\n"

        for style_key, value in text_scores.items():
            report += f"‚Ä¢ {style_key}: {value}\n"

        if user_data.test_start and user_data.test_end:
            duration = user_data.test_end - user_data.test_start
            duration_minutes = int(duration.total_seconds() / 60)
            report += f"\n‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {duration_minutes} –º–∏–Ω—É—Ç\n"
            report += f"üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω: {user_data.test_end.strftime('%d.%m.%Y %H:%M')}"

        self.counter += 1
        return report

    async def send_to_admin(self, user_data: User, scores: Dict[str, int]) -> bool:

        if not ADMIN_USER_ID or ADMIN_USER_ID == 0:
            logger.warning("ADMIN_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return False

        try:
            report = self.format_admin_report(user_data, scores)

            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

            payload = {"chat_id": ADMIN_USER_ID, "text": report, "parse_mode": "HTML", "disable_web_page_preview": True}

            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=payload, timeout=30)

                if response.status_code == 200:
                    logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.user_id}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {response.status_code} - {response.text}")
                    return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            return False


admin_reports = AdminReports()
