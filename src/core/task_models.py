import json
import aiofiles
from typing import Dict, List, Any, Optional
from abc import ABC, abstractmethod


class BaseTest(ABC):
    def __init__(self):
        self.loaded = False

    @abstractmethod
    async def load_questions(self):
        pass

    @abstractmethod
    def get_total_questions(self) -> int:
        pass

    @abstractmethod
    def calculate_scores(self, answers: Dict) -> Dict:
        pass


class PrioritiesTask(BaseTest):
    def __init__(self):
        super().__init__()
        self.question_data = None

    async def load_questions(self):
        try:
            async with aiofiles.open("questions/first_task.json", "r", encoding="utf-8") as f:
                content = await f.read()
                self.question_data = json.loads(content)
                self.loaded = True
                print("–ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
            self.question_data = self._get_default_priorities_question()
            self.loaded = True

    def _get_default_priorities_question(self):
        return {
            "question": {
                "text": "–†–∞—Å—Å—Ç–∞–≤—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ—Ç 5 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ–±—è —Å–µ–π—á–∞—Å) –¥–æ 2 (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–∞–∂–Ω–æ). –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –±–ª–æ–∫, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å–µ –∫–∞–∂—É—Ç—Å—è –≤–∞–∂–Ω—ã–º–∏. –ö–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\n\nüìù 1 / 1",
                "categories": [
                    {
                        "id": "personal_wellbeing",
                        "title": "–õ–∏—á–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ",
                        "description": "‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ—Å—Ç—å\n‚Ä¢ –ß—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n‚Ä¢ –ë—ã—Ç—å –∑–¥–æ—Ä–æ–≤—ã–º –∏ –ø–æ–ª–Ω—ã–º —ç–Ω–µ—Ä–≥–∏–∏",
                    },
                    {
                        "id": "material_career",
                        "title": "–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                        "description": "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å\n‚Ä¢ –£—Å–ø–µ—à–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞ / —Å–≤–æ—ë –¥–µ–ª–æ\n‚Ä¢ –ñ–∏—Ç—å –≤ –∫–æ–º—Ñ–æ—Ä—Ç–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    },
                    {
                        "id": "relationships",
                        "title": "–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ",
                        "description": "‚Ä¢ –ö—Ä–µ–ø–∫–∞—è —Å–µ–º—å—è / –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n‚Ä¢ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω—è—Ç\n‚Ä¢ –î–æ–≤–µ—Ä—è—Ç—å –∏ –±—ã—Ç—å –ø–æ–Ω—è—Ç—ã–º",
                    },
                    {
                        "id": "self_realization",
                        "title": "–°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–ª–∏—è–Ω–∏–µ",
                        "description": "‚Ä¢ –î–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ –ª—é–±–ª—é, –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥\n‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —É—á–∏—Ç—å—Å—è –Ω–æ–≤–æ–º—É\n‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–∏–º—ã–π —Å–ª–µ–¥ –≤ –º–∏—Ä–µ",
                    },
                ],
            }
        }

    def get_total_questions(self) -> int:
        return 1

    def get_question(self):
        if not self.loaded or not self.question_data:
            return None
        return self.question_data["question"]

    def calculate_scores(self, answers: Dict) -> Dict:
        priorities = answers.get("priorities", {})
        return priorities


class InqTask(BaseTest):
    def __init__(self):
        super().__init__()
        self.questions = []

    async def load_questions(self):
        try:
            async with aiofiles.open("questions/second_task.json", "r", encoding="utf-8") as f:
                content = await f.read()
                self.questions = json.loads(content)
                self.loaded = True
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.questions)} INQ –≤–æ–ø—Ä–æ—Å–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
            self.questions = self._get_default_inq_questions()
            self.loaded = True

    def _get_default_inq_questions(self):
        return [
            {
                "text": "–ö–æ–≥–¥–∞ –º–µ–∂–¥—É –ª—é–¥—å–º–∏ –∏–º–µ–µ—Ç –º–µ—Å—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –Ω–∞ –ø–æ—á–≤–µ –∏–¥–µ–π, —è –æ—Ç–¥–∞—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç–æ–π —Å—Ç–æ—Ä–æ–Ω–µ, –∫–æ—Ç–æ—Ä–∞—è:\n1Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã—Ä–∞–∑–∏—Ç—å –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ.\n2Ô∏è‚É£ –õ—É—á—à–µ –≤—Å–µ—Ö –≤—ã—Ä–∞–∂–∞–µ—Ç –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∏–¥–µ–∞–ª—ã.\n3Ô∏è‚É£ –õ—É—á—à–µ –≤—Å–µ—Ö –æ—Ç—Ä–∞–∂–∞–µ—Ç –º–æ–∏ –ª–∏—á–Ω—ã–µ –≤–∑–≥–ª—è–¥—ã –∏ –æ–ø—ã—Ç.\n4Ô∏è‚É£ –ü–æ–¥—Ö–æ–¥–∏—Ç –∫ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ª–æ–≥–∏—á–Ω–æ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.\n5Ô∏è‚É£ –ò–∑–ª–∞–≥–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞–∏–±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ.\n\nüìù 1 / 3",
                "mapping": {
                    "1": "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π",
                    "2": "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                    "3": "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                    "4": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
                    "5": "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                },
            },
            {
                "text": "–ö–æ–≥–¥–∞ —è –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –≤ —Å–æ—Å—Ç–∞–≤–µ –≥—Ä—É–ø–ø—ã, —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –¥–ª—è –º–µ–Ω—è:\n1Ô∏è‚É£ –ü–æ–Ω—è—Ç—å —Ü–µ–ª–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n2Ô∏è‚É£ –†–∞—Å–∫—Ä—ã—Ç—å —Ü–µ–ª–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã.\n3Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.\n4Ô∏è‚É£ –ü–æ–Ω—è—Ç—å, –∫–∞–∫—É—é –≤—ã–≥–æ–¥—É —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –¥–ª—è –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã.\n5Ô∏è‚É£ –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –±—ã–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞ –∏ —Å–¥–≤–∏–Ω—É–ª–∞—Å—å —Å –º–µ—Å—Ç–∞.\n\nüìù 2 / 3",
                "mapping": {
                    "1": "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                    "2": "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π",
                    "3": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
                    "4": "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                    "5": "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                },
            },
            {
                "text": "–í–æ–æ–±—â–µ –≥–æ–≤–æ—Ä—è, —è —É—Å–≤–∞–∏–≤–∞—é –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ, –∫–æ–≥–¥–∞ –º–æ–≥—É:\n1Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å –∏—Ö —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–ª–∏ –±—É–¥—É—â–∏–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏.\n2Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º.\n3Ô∏è‚É£ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.\n4Ô∏è‚É£ –ü–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ —Å—Ö–æ–¥–Ω—ã —Å –ø—Ä–∏–≤—ã—á–Ω—ã–º–∏ –∏–¥–µ—è–º–∏.\n5Ô∏è‚É£ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –¥—Ä—É–≥–∏–º –∏–¥–µ—è–º.\n\nüìù 3 / 3",
                "mapping": {
                    "1": "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
                    "2": "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                    "3": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
                    "4": "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π",
                    "5": "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π",
                },
            },
        ]

    def get_total_questions(self) -> int:
        return len(self.questions)

    def get_question(self, question_num: int):
        if not self.loaded or question_num >= len(self.questions):
            return None
        return self.questions[question_num]

    def calculate_scores(self, answers: Dict) -> Dict:
        scores = {
            "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π": 0,
            "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π": 0,
            "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π": 0,
            "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π": 0,
            "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π": 0,
        }

        inq_answers = answers.get("inq", {})

        for question_num in range(len(self.questions)):
            question_data = self.questions[question_num]
            question_key = f"question_{question_num + 1}"

            if question_key in inq_answers:
                question_answers = inq_answers[question_key]
                mapping = question_data["mapping"]

                for option, score in question_answers.items():
                    style = mapping.get(option)
                    if style and style in scores:
                        scores[style] += score

        return scores


class EpiTask(BaseTest):
    def __init__(self):
        super().__init__()
        self.questions = []

    async def load_questions(self):
        try:
            async with aiofiles.open("questions/third_task.json", "r", encoding="utf-8") as f:
                content = await f.read()
                self.questions = json.loads(content)
                self.loaded = True
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.questions)} EPI –≤–æ–ø—Ä–æ—Å–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
            self.questions = self._get_default_epi_questions()
            self.loaded = True

    def _get_default_epi_questions(self):
        return [
            {
                "number": 1,
                "text": "–ß–∞—Å—Ç–æ –ª–∏ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Ç—è–≥—É –∫ –Ω–æ–≤—ã–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º, –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –≤—Å—Ç—Ä—è—Ö–Ω—É—Ç—å—Å—è, –∏—Å–ø—ã—Ç–∞—Ç—å –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ?",
                "scale": "E",
                "answer_for_point": "–¥–∞",
            },
            {
                "number": 2,
                "text": "–ß–∞—Å—Ç–æ –ª–∏ –Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ –¥—Ä—É–∑—å—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –ø–æ–Ω–∏–º–∞—é—Ç, –º–æ–≥—É—Ç –æ–±–æ–¥—Ä–∏—Ç—å, —É—Ç–µ—à–∏—Ç—å?",
                "scale": "N",
                "answer_for_point": "–¥–∞",
            },
            {
                "number": 3,
                "text": "–í—ã –≤–µ—Ä–∏—Ç–µ –≤ —É–¥–∞—á—É, —Å—á–∏—Ç–∞—è —Å–µ–±—è –≤–µ–∑—É—á–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?",
                "scale": "E",
                "answer_for_point": "–¥–∞",
            },
            {
                "number": 4,
                "text": "–ù–∞—Ö–æ–¥–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –≤–∞–º —Ç—Ä—É–¥–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å ¬´–Ω–µ—Ç¬ª?",
                "scale": "L",
                "answer_for_point": "–¥–∞",
            },
            {
                "number": 5,
                "text": "–ó–∞–¥—É–º—ã–≤–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å?",
                "scale": "L",
                "answer_for_point": "–¥–∞",
            },
        ]

    def get_total_questions(self) -> int:
        return len(self.questions)

    def get_question(self, question_num: int):
        if not self.loaded or question_num >= len(self.questions):
            return None
        return self.questions[question_num]

    def calculate_scores(self, answers: Dict) -> Dict:
        scores = {"E": 0, "N": 0, "L": 0}

        epi_answers = answers.get("epi", {})

        for question in self.questions:
            question_num = question["number"]
            user_answer = epi_answers.get(str(question_num))

            if user_answer and str(user_answer).lower() == question["answer_for_point"].lower():
                scale = question["scale"]
                if scale in scores:
                    scores[scale] += 1

        temperament = self._determine_temperament(scores["E"], scores["N"])

        return {"E": scores["E"], "N": scores["N"], "L": scores["L"], "temperament": temperament}

    def _determine_temperament(self, e_score: int, n_score: int) -> str:
        if e_score >= 2 and n_score >= 2:
            return "–•–æ–ª–µ—Ä–∏–∫"
        elif e_score >= 2 and n_score < 2:
            return "–°–∞–Ω–≥–≤–∏–Ω–∏–∫"
        elif e_score < 2 and n_score >= 2:
            return "–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫"
        else:
            return "–§–ª–µ–≥–º–∞—Ç–∏–∫"
