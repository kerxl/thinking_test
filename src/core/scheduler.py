import asyncio
import logging
from datetime import datetime
from typing import Optional

from sqlalchemy import select
from src.database.models import AsyncSessionLocal, User
from config.settings import BOT_TOKEN, DEBUG
import httpx

logger = logging.getLogger(__name__)


class LinkScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ Senler –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """

    def __init__(self):
        self.running = False
        self._task: Optional[asyncio.Task] = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.running:
            return

        self.running = True
        self._task = asyncio.create_task(self._scheduler_loop())
        logger.info("Link scheduler started")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("Link scheduler stopped")

    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –∏–Ω–∞—á–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        check_interval = 1 if DEBUG else 60

        while self.running:
            try:
                await self._check_and_send_links()
                await asyncio.sleep(check_interval)
            except Exception as e:
                logger.error(f"Error in scheduler loop: {e}")
                await asyncio.sleep(check_interval)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _check_and_send_links(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç–∞–ª–æ"""
        async with AsyncSessionLocal() as session:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏
            current_time = datetime.now()

            result = await session.execute(
                select(User).where(
                    User.admin_senler_link.is_not(None),
                    User.admin_link_send_time.is_not(None),
                    User.admin_link_send_time <= current_time,
                )
            )

            users_to_notify = result.scalars().all()

            for user in users_to_notify:
                try:
                    await self._send_link_to_user(user)

                    # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    user.admin_senler_link = None
                    user.admin_link_send_time = None

                except Exception as e:
                    logger.error(f"Failed to send link to user {user.user_id}: {e}")

            if users_to_notify:
                await session.commit()
                logger.info(f"Processed {len(users_to_notify)} scheduled links")

    async def _send_link_to_user(self, user: User):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        message_text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–∏—á–Ω—ã–π –±–æ—Ç.\n\n"
            f"üîó –°—Å—ã–ª–∫–∞: {user.admin_senler_link}\n\n"
            f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–π –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫–∞–∫–æ–º-—Ç–æ –≤–æ–ø—Ä–æ—Å–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∑–Ω–∞—á–æ–∫ —Å –∑–µ–ª—ë–Ω—ã–º —Å–µ—Ä–¥–µ—á–∫–æ–º ‚Äî –∏ –±–æ—Ç –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Ä—è–¥–æ–º, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.\n\n"
            f"–ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥–ª—è–Ω–∏ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∏–∂–µ. –≠—Ç–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ 10 –º–∏–Ω—É—Ç, –∑–∞—Ç–æ —Ç—ã —Å—Ä–∞–∑—É –æ—Å–≤–æ–∏—à—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏—à–∫–∏. –û–±–µ—â–∞—é, –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üëá"
        )

        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ
        inline_keyboard = {
            "inline_keyboard": [
                [{"text": "üöÄ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", "url": user.admin_senler_link}]
            ]
        }

        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

        payload = {
            "chat_id": user.user_id,
            "text": message_text,
            "parse_mode": "HTML",
            "disable_web_page_preview": False,
            "reply_markup": inline_keyboard,
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload, timeout=30)

            if response.status_code == 200:
                logger.info(f"Link sent successfully to user {user.user_id}")
            else:
                logger.error(
                    f"Failed to send link to user {user.user_id}: {response.status_code} - {response.text}"
                )
                raise Exception(f"Telegram API error: {response.status_code}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
link_scheduler = LinkScheduler()
