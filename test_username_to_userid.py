#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è user_id —á–µ—Ä–µ–∑ Telegram Bot API –ø–æ username
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from src.integration.senler import senler_integration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_username_to_userid():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è user_id –ø–æ username
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è user_id —á–µ—Ä–µ–∑ Telegram Bot API")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_usernames = [
        "kerxl",           # –†–µ–∞–ª—å–Ω—ã–π username
        "@kerxl",          # –° @ –≤ –Ω–∞—á–∞–ª–µ
        "nonexistent_user_12345",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π username
        "",                # –ü—É—Å—Ç–æ–π username
        None,              # None username
    ]
    
    for i, username in enumerate(test_usernames, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: username = '{username}'")
        print("-" * 40)
        
        try:
            user_id = await senler_integration.get_user_id_by_username(username)
            
            if user_id:
                print(f"‚úÖ –£—Å–ø–µ—Ö! user_id = {user_id}")
            else:
                print(f"‚ùå user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{username}'")
                
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def test_webhook_integration():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    """
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å webhook")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ —Å username
    test_data = {
        "username": "kerxl",
        "token": "test_token_integration"
    }
    
    print(f"üì§ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data}")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook –∑–∞–ø—Ä–æ—Å–∞
        user_id = None
        username = test_data.get("username")
        token = test_data.get("token")
        
        print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è username: {username}")
        
        if not user_id and username:
            telegram_user_id = await senler_integration.get_user_id_by_username(username)
            if telegram_user_id:
                user_id = telegram_user_id
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω user_id —á–µ—Ä–µ–∑ Telegram API: {user_id}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id —á–µ—Ä–µ–∑ Telegram API")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π user_id –∫–∞–∫ fallback
                import hashlib
                base_string = username or token or "fallback_test"
                hash_object = hashlib.md5(base_string.encode())
                user_id = 99000000 + int(hash_object.hexdigest()[:8], 16) % 999999
                print(f"üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π user_id: {user_id}")
        
        print(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π user_id: {user_id}")
        
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
    
    print("=" * 60)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è user_id –ø–æ username")
    
    await test_username_to_userid()
    await test_webhook_integration()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from config.settings import BOT_TOKEN
    
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
        sys.exit(1)
    
    print(f"‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {BOT_TOKEN[:10]}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(main())