#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —Ä–∞–Ω–¥–æ–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥, –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏,
–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.
"""

# –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –î–û –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
import logging
import os

# –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º SQLAlchemy –ª–æ–≥–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['SQLALCHEMY_WARN_20'] = '0'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.CRITICAL, format='%(message)s')

# –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã—Ö –ª–æ–≥–æ–≤
for logger_name in [
    'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.pool', 'sqlalchemy.dialects',
    'sqlalchemy.orm', 'sqlalchemy.engine.Engine', 'httpx', 'aiogram', 
    'asyncio', 'urllib3', 'aiofiles', 'asyncpg'
]:
    logging.getLogger(logger_name).setLevel(logging.CRITICAL)
    logging.getLogger(logger_name).disabled = True

# –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ —É—Ä–æ–≤–Ω—è INFO –∏ DEBUG
logging.disable(logging.INFO)

import asyncio
import random
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from src.core.admin_reports import admin_reports

from aiogram import Bot
from aiogram.types import User, Chat
from config.settings import BOT_TOKEN
from config.const import TaskType
from src.database.operations import get_or_create_user
from src.database.models import User as DBUser
from src.core.task_manager import TaskManager

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TaskManager
task_manager = TaskManager()


async def initialize_task_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskManager —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    import json
    from config.const import MESSAGES

    try:
        with open("config/constants.json", "r", encoding="utf-8") as f:
            messages = json.load(f)
            MESSAGES.update(messages)
        print(f"‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(MESSAGES)} –∑–∞–ø–∏—Å–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
        required_keys = ["answer_saved", "answer_process_error", "task_not_found"]
        missing_keys = [key for key in required_keys if key not in MESSAGES]
        if missing_keys:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {missing_keys}")
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            fallback_messages = {
                "answer_saved": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                "answer_process_error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞",
                "task_not_found": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            }
            for key in missing_keys:
                if key in fallback_messages:
                    MESSAGES[key] = fallback_messages[key]

    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª constants.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        MESSAGES.update(
            {
                "answer_saved": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                "answer_process_error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞",
                "task_not_found": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            }
        )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    await task_manager.tasks[TaskType.priorities].load_questions()
    await task_manager.tasks[TaskType.inq].load_questions()
    await task_manager.tasks[TaskType.epi].load_questions()


class SimulatedUser:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self, user_id: int, username: str, first_name: str, last_name: str):
        self.user_id = user_id
        self.username = username
        self.first_name = first_name
        self.last_name = last_name
        self.age = random.randint(18, 65)
        self.bot = Bot(token=BOT_TOKEN)

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        self.priorities_categories = ["personal_wellbeing", "material_career", "relationships", "self_realization"]

    def log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] üë§ {self.first_name}: {message}")

    def create_mock_user(self) -> User:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        return User(
            id=self.user_id,
            is_bot=False,
            first_name=self.first_name,
            last_name=self.last_name,
            username=self.username,
            language_code="ru",
        )

    def create_mock_chat(self) -> Chat:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —á–∞—Ç–∞"""
        return Chat(id=self.user_id, type="private")

    async def start_bot_interaction(self):
        """–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º - –∫–æ–º–∞–Ω–¥–∞ /start"""
        self.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É /start")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã /start
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = await get_or_create_user(
            user_id=self.user_id, username=self.username, first_name=self.first_name, last_name=self.last_name
        )

        self.log("üì± –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        return user

    async def click_start_button(self):
        """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'"""
        self.log("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'")
        await asyncio.sleep(random.uniform(0.1, 0.5))

        # –ò–º–∏—Ç–∏—Ä—É–µ–º callback "start_personal_data"
        self.log("üìù –ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏")

    async def enter_personal_data(self):
        """–í–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        full_name = f"{self.first_name} {self.last_name}"
        self.log(f"‚å®Ô∏è –í–≤–æ–∂—É –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é: '{full_name}'")
        await asyncio.sleep(random.uniform(0.2, 0.8))

        self.log(f"‚å®Ô∏è –í–≤–æ–∂—É –≤–æ–∑—Ä–∞—Å—Ç: {self.age}")
        await asyncio.sleep(random.uniform(0.1, 0.3))

        self.log("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç–∞–º")

    async def click_start_tasks_button(self):
        """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.log("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤")
        await asyncio.sleep(random.uniform(0.1, 0.3))

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = await get_or_create_user(
            user_id=self.user_id, username=self.username, first_name=self.first_name, last_name=self.last_name
        )

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ TaskManager
        success = await task_manager.start_tasks(user)
        if success:
            self.log("üéØ –¢–µ—Å—Ç—ã –Ω–∞—á–∞—Ç—ã! –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ç–µ—Å—Ç—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
        else:
            self.log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
            return False

        return user

    async def complete_priorities_test(self, user: DBUser):
        """–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
        self.log("üìä –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")

        # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –æ—Ç 1 –¥–æ 5
        scores = [1, 2, 3, 4, 5]
        random.shuffle(scores)

        for i, category in enumerate(self.priorities_categories):
            score = scores[i]

            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await asyncio.sleep(random.uniform(0.3, 1.0))

            self.log(f"üîò –í—ã–±–∏—Ä–∞—é –¥–ª—è '{category}' –±–∞–ª–ª: {score}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ TaskManager
            try:
                success, message = await task_manager.process_priorities_answer(user, category, score)
            except Exception as e:
                self.log(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ process_priorities_answer: {e}")
                success, message = False, str(e)

            if not success:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∞–ª–ª–∞: {message}")
                # –ï—Å–ª–∏ –±–∞–ª–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π
                available_scores = [s for s in [1, 2, 3, 4, 5] if s not in [scores[j] for j in range(i)]]
                if available_scores:
                    score = random.choice(available_scores)
                    scores[i] = score
                    self.log(f"üîÑ –ü—Ä–æ–±—É—é –¥—Ä—É–≥–æ–π –±–∞–ª–ª: {score}")
                    success, message = await task_manager.process_priorities_answer(user, category, score)

                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–ª—ã
                    retry_count = 0
                    while not success and available_scores and retry_count < 3:
                        available_scores.remove(score) if score in available_scores else None
                        if available_scores:
                            score = random.choice(available_scores)
                            scores[i] = score
                            self.log(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –±–∞–ª–ª–æ–º: {score}")
                            success, message = await task_manager.process_priorities_answer(user, category, score)
                        retry_count += 1

            if success:
                self.log(f"‚úÖ –ë–∞–ª–ª {score} –ø—Ä–∏–Ω—è—Ç")
            else:
                self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –±–∞–ª–ª: {message}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        if task_manager.is_priorities_task_completed(user.user_id):
            self.log("üéâ –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            await asyncio.sleep(random.uniform(0.1, 0.5))
            self.log("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç 1'")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
            await task_manager.move_to_next_task(user.user_id)
            await asyncio.sleep(random.uniform(0.1, 0.3))
            self.log("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç 2'")
            return True
        else:
            self.log("‚ùå –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return False

    async def complete_inq_test(self, user: DBUser):
        """–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ INQ —Ç–µ—Å—Ç–∞"""
        self.log("üß† –ù–∞—á–∏–Ω–∞—é INQ —Ç–µ—Å—Ç (—Å—Ç–∏–ª–∏ –º—ã—à–ª–µ–Ω–∏—è)...")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        inq_task = task_manager.tasks[TaskType.inq]
        total_questions = inq_task.get_total_questions()

        self.log(f"üìã –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ INQ —Ç–µ—Å—Ç–µ: {total_questions}")

        for question_num in range(total_questions):
            self.log(f"‚ùì –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_num + 1}/{total_questions}")

            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            await asyncio.sleep(random.uniform(0.5, 1.5))

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            options = ["1", "2", "3", "4", "5"]
            random.shuffle(options)  # –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–±–æ—Ä–∞

            for step, option in enumerate(options):
                score = 5 - step  # 5, 4, 3, 2, 1

                # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
                await asyncio.sleep(random.uniform(0.2, 0.8))

                self.log(f"üîò –í—ã–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç {option} (–±–∞–ª–ª: {score})")

                success, message = await task_manager.process_inq_answer(user, option)

                if success:
                    self.log(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {option} –ø—Ä–∏–Ω—è—Ç")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {message}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            if task_manager.is_inq_question_completed(user.user_id, question_num):
                self.log(f"‚úÖ –í–æ–ø—Ä–æ—Å {question_num + 1} –∑–∞–≤–µ—Ä—à–µ–Ω")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if question_num < total_questions - 1:
                    await asyncio.sleep(random.uniform(0.1, 0.3))
                    await task_manager.move_to_next_question(user.user_id)
                    self.log(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É {question_num + 2}")
            else:
                self.log(f"‚ùå –í–æ–ø—Ä–æ—Å {question_num + 1} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")

        self.log("üéâ INQ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        await asyncio.sleep(random.uniform(0.1, 0.5))

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
        await task_manager.move_to_next_task(user.user_id)
        self.log("üîò –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç 3'")

        return True

    async def complete_epi_test(self, user: DBUser):
        """–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ EPI —Ç–µ—Å—Ç–∞"""
        self.log("üß† –ù–∞—á–∏–Ω–∞—é EPI —Ç–µ—Å—Ç (–ª–∏—á–Ω–æ—Å—Ç—å)...")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        epi_task = task_manager.tasks[TaskType.epi]
        total_questions = epi_task.get_total_questions()

        self.log(f"üìã –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ EPI —Ç–µ—Å—Ç–µ: {total_questions}")

        for question_num in range(total_questions):
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            await asyncio.sleep(random.uniform(0.2, 0.8))

            # –°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç "–î–∞" –∏–ª–∏ "–ù–µ—Ç"
            answer = random.choice(["–î–∞", "–ù–µ—Ç"])

            self.log(f"‚ùì –í–æ–ø—Ä–æ—Å {question_num + 1}/{total_questions} - –æ—Ç–≤–µ—á–∞—é: {answer}")

            success, message = await task_manager.process_epi_answer(user, answer)

            if success:
                self.log(f"‚úÖ –û—Ç–≤–µ—Ç '{answer}' –ø—Ä–∏–Ω—è—Ç")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {message}")

        self.log("üéâ EPI —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        await asyncio.sleep(random.uniform(0.1, 0.3))

        return True

    async def complete_all_tests_and_get_results(self, user: DBUser):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.log("üèÅ –ó–∞–≤–µ—Ä—à–∞—é –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ EPI —Ç–µ—Å—Ç–∞ (–∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
        await task_manager.move_to_next_task(user.user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scores = await task_manager.complete_all_tasks(user)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        await admin_reports.send_to_admin(user, scores)

        if scores:
            self.log("üìä –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
            if "personal_wellbeing" in scores or any("personal_wellbeing" in str(k) for k in scores.keys()):
                self.log("  üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã INQ
            inq_styles = ["–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π", "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π", "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π"]
            inq_results = {style: scores.get(style, 0) for style in inq_styles if style in scores}
            if inq_results:
                max_style = max(inq_results, key=inq_results.get)
                self.log(f"  üß† –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è: {max_style} ({inq_results[max_style]} –±–∞–ª–ª–æ–≤)")

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã EPI
            if "temperament" in scores:
                self.log(f"  üé≠ –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: {scores['temperament']}")
                self.log(f"  üìà E (—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è): {scores.get('E', 0)}")
                self.log(f"  üìà N (–Ω–µ–π—Ä–æ—Ç–∏–∑–º): {scores.get('N', 0)}")
                self.log(f"  üìà L (–ª–æ–∂—å): {scores.get('L', 0)}")

            self.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return True
        else:
            self.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False

    async def check_database_record(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        user = await get_or_create_user(user_id=self.user_id)

        if user:
            self.log(f"üìã –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            self.log(f"  üë§ ID: {user.user_id}")
            self.log(f"  üìõ –ò–º—è: {user.first_name} {user.last_name}")
            self.log(f"  üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user.age}")
            self.log(f"  ‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {user.test_completed}")

            if user.test_completed:
                self.log(f"  üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {user.get_priorities_dict()}")
                self.log(f"  üß† INQ –±–∞–ª–ª—ã: {user.get_inq_scores_dict()}")
                self.log(f"  üé≠ EPI –±–∞–ª–ª—ã: {user.get_epi_scores_dict()}")
                self.log(f"  üé≠ –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: {user.temperament}")

            return True
        else:
            self.log("‚ùå –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False


async def generate_random_user() -> SimulatedUser:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –°–ø–∏—Å–∫–∏ –∏–º–µ–Ω –∏ —Ñ–∞–º–∏–ª–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    first_names = [
        "–ê–ª–µ–∫—Å–µ–π",
        "–ú–∞—Ä–∏—è",
        "–î–º–∏—Ç—Ä–∏–π",
        "–ê–Ω–Ω–∞",
        "–°–µ—Ä–≥–µ–π",
        "–ï–ª–µ–Ω–∞",
        "–ê–Ω–¥—Ä–µ–π",
        "–û–ª—å–≥–∞",
        "–ú–∏—Ö–∞–∏–ª",
        "–¢–∞—Ç—å—è–Ω–∞",
        "–í–ª–∞–¥–∏–º–∏—Ä",
        "–ù–∞—Ç–∞–ª—å—è",
        "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
        "–ò—Ä–∏–Ω–∞",
        "–ú–∞–∫—Å–∏–º",
        "–Æ–ª–∏—è",
    ]

    male_last_names = [
        "–ò–≤–∞–Ω–æ–≤",
        "–ü–µ—Ç—Ä–æ–≤",
        "–°–∏–¥–æ—Ä–æ–≤",
        "–ö–æ–∑–ª–æ–≤",
        "–ù–æ–≤–∏–∫–æ–≤",
        "–ú–æ—Ä–æ–∑–æ–≤",
        "–ü–æ–ø–æ–≤",
        "–í–æ–ª–∫–æ–≤",
        "–°–æ–∫–æ–ª–æ–≤",
        "–õ–µ–±–µ–¥–µ–≤",
        "–°–µ–º–µ–Ω–æ–≤",
        "–ï–≥–æ—Ä–æ–≤",
        "–ü–∞–≤–ª–æ–≤",
        "–ó–∞—Ö–∞—Ä–æ–≤",
        "–°—Ç–µ–ø–∞–Ω–æ–≤",
        "–ù–∏–∫–æ–ª–∞–µ–≤",
    ]

    female_last_names = [
        "–ò–≤–∞–Ω–æ–≤–∞",
        "–ü–µ—Ç—Ä–æ–≤–∞",
        "–°–∏–¥–æ—Ä–æ–≤–∞",
        "–ö–æ–∑–ª–æ–≤–∞",
        "–ù–æ–≤–∏–∫–æ–≤–∞",
        "–ú–æ—Ä–æ–∑–æ–≤–∞",
        "–ü–æ–ø–æ–≤–∞",
        "–í–æ–ª–∫–æ–≤–∞",
        "–°–æ–∫–æ–ª–æ–≤–∞",
        "–õ–µ–±–µ–¥–µ–≤–∞",
        "–°–µ–º–µ–Ω–æ–≤–∞",
        "–ï–≥–æ—Ä–æ–≤–∞",
        "–ü–∞–≤–ª–æ–≤–∞",
        "–ó–∞—Ö–∞—Ä–æ–≤–∞",
        "–°—Ç–µ–ø–∞–Ω–æ–≤–∞",
        "–ù–∏–∫–æ–ª–∞–µ–≤–∞",
    ]

    first_name = random.choice(first_names)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–∞–º–∏–ª–∏—é
    female_names = ["–ú–∞—Ä–∏—è", "–ê–Ω–Ω–∞", "–ï–ª–µ–Ω–∞", "–û–ª—å–≥–∞", "–¢–∞—Ç—å—è–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–ò—Ä–∏–Ω–∞", "–Æ–ª–∏—è"]
    if first_name in female_names:
        last_name = random.choice(female_last_names)
    else:
        last_name = random.choice(male_last_names)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = random.randint(100000, 999999)
    username = f"user_{user_id}"

    return SimulatedUser(user_id, username, first_name, last_name)


async def simulate_full_user_journey():
    """–ü–æ–ª–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""

    print("=" * 80)
    print("ü§ñ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–ï–°–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
    print("=" * 80)
    print()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await generate_random_user()

    print(f"üë§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}")
    print(f"üÜî ID: {user.user_id}, –≤–æ–∑—Ä–∞—Å—Ç: {user.age}")
    print()

    try:
        # 1. –ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
        db_user = await user.start_bot_interaction()

        # 2. –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        await user.click_start_button()

        # 3. –í–≤–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await user.enter_personal_data()

        # 4. –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤
        db_user = await user.click_start_tasks_button()
        if not db_user:
            return False

        # 5. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        success = await user.complete_priorities_test(db_user)
        if not success:
            user.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
            return False

        # 6. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ INQ —Ç–µ—Å—Ç–∞
        success = await user.complete_inq_test(db_user)
        if not success:
            user.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å INQ —Ç–µ—Å—Ç")
            return False

        # 7. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ EPI —Ç–µ—Å—Ç–∞
        success = await user.complete_epi_test(db_user)
        if not success:
            user.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å EPI —Ç–µ—Å—Ç")
            return False

        # 8. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        success = await user.complete_all_tests_and_get_results(db_user)
        if not success:
            user.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            return False

        # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await user.check_database_record()

        print()
        print("=" * 80)
        if success:
            print("üéâ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –≤—Å–µ —Ç–µ—Å—Ç—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        else:
            print("‚ùå –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
        print("=" * 80)

        return success

    except Exception as e:
        user.log(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("src/bot/main.py").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (06.08/)")
        sys.exit(1)

    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...")
    print("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TaskManager
    await initialize_task_manager()
    print("‚úÖ TaskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(1)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        success = await simulate_full_user_journey()

        if success:
            print("\nüéØ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ:")
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î –∫–æ–º–∞–Ω–¥–æ–π: make db-status")
            print("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞")

        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        print("\n‚ùå –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    asyncio.run(main())
