#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
–ü—Ä–æ—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è.
"""

import asyncio
import random
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from config.settings import BOT_TOKEN
from config.const import TaskType
from src.database.operations import get_or_create_user
from src.database.models import User as DBUser
from src.core.task_manager import TaskManager

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TaskManager
task_manager = TaskManager()

async def initialize_task_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskManager —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    import json
    from config.const import MESSAGES
    
    try:
        with open("config/constants.json", "r", encoding="utf-8") as f:
            messages = json.load(f)
            MESSAGES.update(messages)
        print(f"‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(MESSAGES)} –∑–∞–ø–∏—Å–µ–π")
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª constants.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        MESSAGES.update({
            "answer_saved": "–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
            "answer_process_error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞",
            "task_not_found": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        })
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    await task_manager.tasks[TaskType.priorities].load_questions()
    await task_manager.tasks[TaskType.inq].load_questions()
    await task_manager.tasks[TaskType.epi].load_questions()

class FastSimulatedUser:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id: int, username: str, first_name: str, last_name: str):
        self.user_id = user_id
        self.username = username
        self.first_name = first_name
        self.last_name = last_name
        self.age = random.randint(18, 65)
        
        self.priorities_categories = [
            "personal_wellbeing",
            "material_career", 
            "relationships",
            "self_realization"
        ]
        
    def log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] üë§ {self.first_name}: {message}")
    
    async def run_simulation(self):
        """–ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
        
        self.log("üöÄ –ù–∞—á–∏–Ω–∞—é –±—ã—Å—Ç—Ä—É—é —Å–∏–º—É–ª—è—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user(
            user_id=self.user_id,
            username=self.username,
            first_name=self.first_name,
            last_name=self.last_name
        )
        self.log(f"üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î (ID: {user.user_id})")
        
        # 2. –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç—ã
        success = await task_manager.start_tasks(user)
        if not success:
            self.log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤")
            return False
        
        self.log("üéØ –¢–µ—Å—Ç—ã –Ω–∞—á–∞—Ç—ã!")
        
        # 3. –ü—Ä–æ—Ö–æ–¥–∏–º —Ç–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        self.log("üìä –ü—Ä–æ—Ö–æ–∂—É —Ç–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")
        scores = [1, 2, 3, 4, 5]
        random.shuffle(scores)
        
        for i, category in enumerate(self.priorities_categories):
            score = scores[i]
            success, message = await task_manager.process_priorities_answer(user, category, score)
            if success:
                self.log(f"‚úÖ {category}: {score} –±–∞–ª–ª–æ–≤")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: {message}")
        
        if not task_manager.is_priorities_task_completed(user.user_id):
            self.log("‚ùå –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return False
        
        await task_manager.move_to_next_task(user.user_id)
        self.log("üéâ –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥ –∫ INQ —Ç–µ—Å—Ç—É")
        
        # 4. –ü—Ä–æ—Ö–æ–¥–∏–º INQ —Ç–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        self.log("üß† –ü—Ä–æ—Ö–æ–∂—É INQ —Ç–µ—Å—Ç (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)...")
        
        max_questions = min(3, task_manager.tasks[TaskType.inq].get_total_questions())
        
        for question_num in range(max_questions):
            self.log(f"‚ùì INQ –≤–æ–ø—Ä–æ—Å {question_num + 1}/{max_questions}")
            
            # –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            options = ["1", "2", "3", "4", "5"]
            random.shuffle(options)
            
            for step, option in enumerate(options):
                success, message = await task_manager.process_inq_answer(user, option)
                if success:
                    self.log(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {option} –ø—Ä–∏–Ω—è—Ç")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞: {message}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            if question_num < max_questions - 1:
                await task_manager.move_to_next_question(user.user_id)
        
        await task_manager.move_to_next_task(user.user_id)
        self.log("üéâ INQ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥ –∫ EPI —Ç–µ—Å—Ç—É")
        
        # 5. –ü—Ä–æ—Ö–æ–¥–∏–º EPI —Ç–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        self.log("üß† –ü—Ä–æ—Ö–æ–∂—É EPI —Ç–µ—Å—Ç (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)...")
        
        max_epi_questions = min(10, task_manager.tasks[TaskType.epi].get_total_questions())
        
        for question_num in range(max_epi_questions):
            answer = random.choice(["–î–∞", "–ù–µ—Ç"])
            success, message = await task_manager.process_epi_answer(user, answer)
            if success:
                self.log(f"‚úÖ –í–æ–ø—Ä–æ—Å {question_num + 1}: {answer}")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: {message}")
        
        self.log("üéâ EPI —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # 6. –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await task_manager.move_to_next_task(user.user_id)
        scores = await task_manager.complete_all_tasks(user)
        
        if scores:
            self.log("üìä –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            
            # INQ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            inq_styles = ["–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π", "–ò–¥–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", "–ü—Ä–∞–≥–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π", "–†–µ–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π"]
            inq_results = {style: scores.get(style, 0) for style in inq_styles if style in scores}
            if inq_results:
                max_style = max(inq_results, key=inq_results.get)
                self.log(f"  üß† –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å: {max_style} ({inq_results[max_style]} –±–∞–ª–ª–æ–≤)")
            
            # EPI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if "temperament" in scores:
                self.log(f"  üé≠ –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: {scores['temperament']}")
            
            self.log("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            self.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False

async def generate_random_user():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    first_names = ["–ê–ª–µ–∫—Å–µ–π", "–ú–∞—Ä–∏—è", "–î–º–∏—Ç—Ä–∏–π", "–ê–Ω–Ω–∞", "–°–µ—Ä–≥–µ–π", "–ï–ª–µ–Ω–∞"]
    last_names = ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤–∞", "–°–∏–¥–æ—Ä–æ–≤", "–ö–æ–∑–ª–æ–≤–∞", "–ù–æ–≤–∏–∫–æ–≤", "–ú–æ—Ä–æ–∑–æ–≤–∞"]
    
    first_name = random.choice(first_names)
    last_name = random.choice(last_names)
    user_id = random.randint(100000, 999999)
    username = f"user_{user_id}"
    
    return FastSimulatedUser(user_id, username, first_name, last_name)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
    
    print("üöÄ –ë–´–°–¢–†–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–ï–°–¢–û–í")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await initialize_task_manager()
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await generate_random_user()
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name} (ID: {user.user_id})")
    print(f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user.age}\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    try:
        success = await user.run_simulation()
        
        print("\n" + "=" * 50)
        if success:
            print("üéâ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            print("\nüîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("  - make db-status")
            print("  - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã users –≤ –ë–î")
        else:
            print("‚ùå –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
        print("=" * 50)
        
        return success
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("src/bot/main.py").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (06.08/)")
        sys.exit(1)
    
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)